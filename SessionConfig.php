<?php
	
	namespace Sessions;

	/**
	 *	Session configuration
	 *
	 *	@author   Ahmed Hassan <91ahmed.github.io>
	 *	@link     https://github.com/91ahmed
	 */
	class SessionConfig
	{
		/**
		 *	@var SessionName
		 *
		 *	Set the current session name.
		 */
		protected $SessionName = 'sess';

		/**
		 *	@var SessionDomain
		 *
		 *	Cookie domain to make cookies visible on all subdomains.
		 */
		protected $SessionDomain = 'localhost'; // [ for example .example.com ]

		/**
		 *	@var SessionLifeTime
		 *
		 *	Lifetime of the session cookie, defined in seconds.
		 */
		protected $SessionLifeTime = 2678400; // [ 2678400 - expire in 30 days ]

		/**
		 *	@var SessionPath
		 *
		 *	Path on the domain where the cookie will work. 
		 *	Use a single slash ('/') for all paths on the domain.
		 */
		protected $SessionPath = '/';

		/**
		 *	@var SessionSSL
		 *
		 *	If true cookie will only be sent over secure connections.
		 */ 
		protected $SessionSSL = false;

		/**
		 *	@var SessionHttp
		 *
		 *	If set to true then PHP will attempt to send the httponly flag when setting the session cookie.
		 */
		protected $SessionHttp = true;

		/**
		 *	@var SessionHandler
		 *
		 *	Sets user-level session storage functions.
		 */
		protected $SessionHandler = 'files';

		/**
		 *	@var SessionSave
		 *
		 *	Set the current session save path.
		 */
		protected $SessionSavePath = 'sess-id';

		/**
		 *	@var CookieSecure
		 *
		 *	Allow access to the session ID cookie only when the protocol is HTTPS. 
		 *  If a website is only accessible via HTTPS, it should enable this setting.
		 */
		protected $CookieSecure = 0;

		/**
		 *	@var UseCookies
		 *
		 *	Only use cookies for session ID management when it is possible. 
		 *	Most applications should use a cookie for the session ID.
		 */
		protected $UseCookies = 1;

		/**
		 *	@var UseStrictMode
		 *
		 *	Enabling session.use_strict_mode is mandatory for secure sessions.
		 *	This prevents the session module to use an uninitialized session ID. 
		 *	The session module only accepts valid session IDs generated by the session module.
		 */
		protected $UseStrictMode = 1;

		/**
		 *	@var UseTransSid
		 *
		 *	Disabling transparent session ID management improves the general session ID security 
		 *	by eliminating the possibility of a session ID injection and/or leak.
		 */
		protected $UseTransSid = 0;

		/**
		 *	@var CookieHttpOnly
		 *
		 *	Refuses access to the session cookie from JavaScript. 
		 *	This setting prevents cookies snatched by a JavaScript injection.
		 */
		protected $CookieHttpOnly = 1;

		/**
		 *	@var RegenerateSessionID
		 *
		 *	Update the current session id with a newly generated one
		 */
		protected $RegenerateSessionID = true;

		/**
		 *	Session settings
		 *	@return void
		 */
		protected function settings ()
		{
			// ini configurations
			ini_set ('session.cookie_secure', $this->CookieSecure);
			ini_set ('session.use_cookies', $this->UseCookies);
			ini_set ('session.use_only_cookies', $this->UseCookies);
			ini_set ('session.use_strict_mode', $this->UseStrictMode);
			ini_set ('session.use_trans_sid', $this->UseTransSid);
			ini_set ('session.cookie_httponly', $this->CookieHttpOnly);
			ini_set ('session.cookie_lifetime', $this->SessionLifeTime);
			ini_set ('session.save_handler', $this->SessionHandler);

			// Set the current session name.
			session_name($this->SessionName);

			// Set the session cookie parameters
			session_set_cookie_params(
				$this->SessionLifeTime,
				$this->SessionPath,
				$this->SessionDomain,
				$this->SessionSSL,
				$this->SessionHttp
			);

			// Set the current session save path
			session_save_path($this->SessionSavePath);
		}
	}
?>